// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: internal/gen/market.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Market_JoinNetwork_FullMethodName   = "/market.Market/JoinNetwork"
	Market_UploadFile_FullMethodName    = "/market.Market/UploadFile"
	Market_DiscoverPeers_FullMethodName = "/market.Market/DiscoverPeers"
)

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	JoinNetwork(ctx context.Context, opts ...grpc.CallOption) (Market_JoinNetworkClient, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Market_UploadFileClient, error)
	DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersReply, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) JoinNetwork(ctx context.Context, opts ...grpc.CallOption) (Market_JoinNetworkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Market_ServiceDesc.Streams[0], Market_JoinNetwork_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &marketJoinNetworkClient{stream}
	return x, nil
}

type Market_JoinNetworkClient interface {
	Send(*KeepAliveRequest) error
	Recv() (*KeepAliveResponse, error)
	grpc.ClientStream
}

type marketJoinNetworkClient struct {
	grpc.ClientStream
}

func (x *marketJoinNetworkClient) Send(m *KeepAliveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marketJoinNetworkClient) Recv() (*KeepAliveResponse, error) {
	m := new(KeepAliveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Market_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Market_ServiceDesc.Streams[1], Market_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &marketUploadFileClient{stream}
	return x, nil
}

type Market_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type marketUploadFileClient struct {
	grpc.ClientStream
}

func (x *marketUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marketUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketClient) DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersReply, error) {
	out := new(DiscoverPeersReply)
	err := c.cc.Invoke(ctx, Market_DiscoverPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	JoinNetwork(Market_JoinNetworkServer) error
	UploadFile(Market_UploadFileServer) error
	DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersReply, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) JoinNetwork(Market_JoinNetworkServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedMarketServer) UploadFile(Market_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMarketServer) DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPeers not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_JoinNetwork_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketServer).JoinNetwork(&marketJoinNetworkServer{stream})
}

type Market_JoinNetworkServer interface {
	Send(*KeepAliveResponse) error
	Recv() (*KeepAliveRequest, error)
	grpc.ServerStream
}

type marketJoinNetworkServer struct {
	grpc.ServerStream
}

func (x *marketJoinNetworkServer) Send(m *KeepAliveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marketJoinNetworkServer) Recv() (*KeepAliveRequest, error) {
	m := new(KeepAliveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Market_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketServer).UploadFile(&marketUploadFileServer{stream})
}

type Market_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type marketUploadFileServer struct {
	grpc.ServerStream
}

func (x *marketUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marketUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Market_DiscoverPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DiscoverPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Market_DiscoverPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DiscoverPeers(ctx, req.(*DiscoverPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverPeers",
			Handler:    _Market_DiscoverPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinNetwork",
			Handler:       _Market_JoinNetwork_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Market_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/gen/market.proto",
}
